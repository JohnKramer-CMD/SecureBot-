# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "–¢–û–ö–ï–ù_–ò–ó_BOTFATHER"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
def check_ssl(domain):
    try:
        ctx = ssl.create_default_context()
        with socket.create_connection((domain, 443)) as sock:
            with ctx.wrap_socket(sock, server_hostname=domain) as ssock:
                cert = ssock.getpeercert()
                expire_date = datetime.strptime(cert['notAfter'], "%b %d %H:%M:%S %Y GMT")
                days_left = (expire_date - datetime.utcnow()).days
                return f"üîí SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–∞–π—Ç–∞ {domain} –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π."
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL: {e}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ä—Ç–æ–≤
def scan_ports(domain):
    nm = nmap.PortScanner()
    try:
        nm.scan(domain, '1-1024')  # –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–æ—Ä—Ç—ã —Å 1 –ø–æ 1024
        scan_info = nm.all_tcp()   # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤—Å–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–º TCP –ø–æ—Ä—Ç–∞–º
        result = f"üì° –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ä—Ç–æ–≤ –¥–ª—è {domain}:\n"
        for port in scan_info:
            result += f"–ü–æ—Ä—Ç {port}: {'–û—Ç–∫—Ä—ã—Ç' if nm[domain].has_tcp(port) else '–ó–∞–∫—Ä—ã—Ç'}\n"
        return result
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
@dp.message(Command("start"))
async def start_command(message: types.Message):
    inline_keyboard = InlineKeyboardMarkup(row_width=2)
    button_ssl = InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∫–∞ SSL", callback_data="ssl_help")
    button_scan = InlineKeyboardButton("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤", callback_data="scan_help")
    button_help = InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="help")
    inline_keyboard.add(button_ssl, button_scan, button_help)

    await message.answer(
        "üîê –ü—Ä–∏–≤–µ—Ç! –Ø SecureBot.\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–∞–π—Ç–æ–≤ –∏ —Å–µ—Ä–≤–µ—Ä–æ–≤.\n"
        "–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É –≤—Ä—É—á–Ω—É—é.",
        reply_markup=inline_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_data –¥–ª—è –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(lambda c: c.data == "ssl_help")
async def ssl_help(callback_query: types.CallbackQuery):
    await callback_query.message.answer(
        "–ö–æ–º–∞–Ω–¥–∞ /ssl <url> –ø—Ä–æ–≤–µ—Ä—è–µ—Ç SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è —Å–∞–π—Ç–∞. –ü—Ä–∏–º–µ—Ä: /ssl google.com"
    )

@dp.callback_query_handler(lambda c: c.data == "scan_help")
async def scan_help(callback_query: types.CallbackQuery):
    await callback_query.message.answer(
        "–ö–æ–º–∞–Ω–¥–∞ /scan <url> —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–æ—Ä—Ç—ã —Å–∞–π—Ç–∞. –ü—Ä–∏–º–µ—Ä: /scan google.com"
    )

@dp.callback_query_handler(lambda c: c.data == "help")
async def help_command(callback_query: types.CallbackQuery):
    await callback_query.message.answer(
        "üí° –í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –∏ –∏—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π:\n\n"
        "/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
        "/ssl <url> - –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ —Å–∞–π—Ç–∞. –ü—Ä–∏–º–µ—Ä: /ssl google.com\n"
        "/scan <url> - –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ —Å–∞–π—Ç–∞. –ü—Ä–∏–º–µ—Ä: /scan google.com"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ssl
@dp.message(Command("ssl"))
async def ssl_command(message: types.Message):
    url = message.text.split(" ")
    if len(url) < 2:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<code>/ssl site.com</code>")
        return

    domain = url[1].replace("https://", "").replace("http://", "").strip("/")
    result = check_ssl(domain)
    await message.answer(result)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /scan
@dp.message(Command("scan"))
async def scan_command(message: types.Message):
    url = message.text.split(" ")
    if len(url) < 2:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<code>/scan site.com</code>")
        return

    domain = url[1].replace("https://", "").replace("http://", "").strip("/")
    result = scan_ports(domain)
    await message.answer(result)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
